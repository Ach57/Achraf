; Please note that this code only works for numbers with remainder 0
section .data
    x db 8 
    y db 2 
    msg db "X/Y is equal to: " 
    len equ $-msg
    result db 11   ; Buffer to store the result string
    
section .text
    global _start

print_Message: ; Prints message msg by calling the method in the main e.g _Start
    mov ecx, msg
    mov edx, len
    mov eax, 4
    mov ebx, 1
    int 80h
    ret

exit_program: ; exist the program moving 1 to eax, clearing ebx
    mov eax, 1
    xor ebx, ebx  ; Exit code 0
    int 80h

print_result:
; Print the result string
    mov edx, 8         ; Length of the result string
    mov ecx, esi        ; ECX points to the beginning of the result string
    mov eax, 4
    mov ebx, 1
    int 80h
    ret

convert_loop: ; converts the result to a string
    xor edx, edx        ; Clear EDX for division
    mov ebx, 10          ; Divisor
    div ebx             ; Divide EAX by 10, quotient in EAX, remainder in EDX
    add dl, '0'         ; Convert the remainder to ASCII character
    dec esi             ; Move back one position in the buffer
    mov [esi], dl       ; Store the ASCII character in the buffer
    loop convert_loop   ; Repeat until all digits are converted
    
    ret



_start:
    call print_Message

    mov edx,0 
    ; Add x and y
    movzx eax, byte [x]  ; Load x into EAX, zero-extending to 32 bits
    div byte [y]         ;  eax = x/y 
    ; eax should have the value of 1 now and edx the reminder which is 14
    ; Convert the result to a string
    mov esi, result      ; Point to the beginning of the result buffer
    mov ecx, 8          ; Counter for number of digits in the result

    call convert_loop
    
    call print_result ; calling print result function
    ; Exit the program
    call exit_program
